name: Docker Build and Publish

on:
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.pkg.github.com
  IMAGE_NAME: jhonacodes/worker_sheet_api/worker_sheet_image
  APP_ENV: prod
  DATABASE_MAX_CONNECTIONS: 10
  DATABASE_MIN_CONNECTIONS: 1
  DATABASE_POOL_SIZE: 12
  DATABASE_TIMEOUT: 12.4
  SERVER_HOST: 0.0.0.0
  SERVER_PORT: 3000
  DEBUG_MODE: false

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y libpq-dev postgresql-client libclang-dev libargon2-dev

      - name: Run tests and generate coverage
        run: cargo tarpaulin --verbose --workspace --timeout 120 --out Xml

  build-and-push:
    needs: test-coverage
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_URL=postgres://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}
            HASH_SECRET=${{ secrets.HASH_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            API_KEY=${{ secrets.API_KEY }}
            SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
            SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
            SMTP_SERVER=${{ secrets.SMTP_SERVER }}
            SMTP_SERVER_PORT=${{ secrets.SMTP_SERVER_PORT }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/deployment_key

          # Debug: Verify SSH connection
          ssh -v -i ~/.ssh/deployment_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

          # Create .env file
          ssh -i ~/.ssh/deployment_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cat > ~/.env << EOF
          APP_ENV=prod
          DATABASE_MAX_CONNECTIONS=${{ env.DATABASE_MAX_CONNECTIONS }}
          DATABASE_MIN_CONNECTIONS=${{ env.DATABASE_MIN_CONNECTIONS }}
          DATABASE_POOL_SIZE=${{ env.DATABASE_POOL_SIZE }}
          DATABASE_TIMEOUT=${{ env.DATABASE_TIMEOUT }}
          SERVER_HOST=${{ env.SERVER_HOST }}
          SERVER_PORT=${{ env.SERVER_PORT }}
          DEBUG_MODE=${{ env.DEBUG_MODE }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_URL=postgres://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}
          HASH_SECRET=${{ secrets.HASH_SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          API_KEY=${{ secrets.API_KEY }}
          SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
          SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
          SMTP_SERVER=${{ secrets.SMTP_SERVER }}
          SMTP_SERVER_PORT=${{ secrets.SMTP_SERVER_PORT }}
          EOF"

          # Copy docker-compose
          scp -i ~/.ssh/deployment_key docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/docker-compose.yml

          # Deployment script with comprehensive error handling
          ssh -i ~/.ssh/deployment_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            set -e
          
            # Ensure docker and docker-compose are installed
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed"
              exit 1
            fi

            # Login to GitHub Packages
            echo "${{ secrets.G_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Stop and remove existing containers
            docker stop api_prod database_prod || true
            docker rm api_prod database_prod || true

            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Clean up old images
            docker image prune -f

            # Deploy with docker-compose
            docker compose -f ~/docker-compose.yml --profile prod up -d
          '

      - name: Deployment Verification
        run: |
          sleep 30  # Wait for containers to start
          ssh -i ~/.ssh/deployment_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            docker ps
            docker logs api_prod
          '