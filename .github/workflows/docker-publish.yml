name: Docker Build and Publish

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.pkg.github.com
  IMAGE_NAME: jhonacodes/worker_sheet_api/worker_sheet_image
  APP_ENV: prod
  DATABASE_MAX_CONNECTIONS: 10
  DATABASE_MIN_CONNECTIONS: 1
  DATABASE_POOL_SIZE: 12
  DATABASE_TIMEOUT: 12.4
  SERVER_HOST: 0.0.0.0
  SERVER_PORT: 3000
  DEBUG_MODE: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_URL=postgres://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}
            HASH_SECRET=${{ secrets.HASH_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            API_KEY=${{ secrets.API_KEY }}
            SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
            SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
            SMTP_SERVER=${{ secrets.SMTP_SERVER }}
            SMTP_SERVER_PORT=${{ secrets.SMTP_SERVER_PORT }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          # Configurar SSH
          if [ ! -z "${{ secrets.VPS_HOST }}" ]; then
            echo "VPS_HOST exists and is not empty"
            echo "First few characters: ${VPS_HOST:0:3}..."
          else
            echo "VPS_HOST is empty!"
          fi

          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          mkdir -p ~/.ssh
          ssh-keyscan -v -p 22 ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          # Login a GitHub Packages en el VPS
          ssh -i ssh_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo ${{ secrets.G_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin"

          # Actualizar y reiniciar el contenedor
          ssh -i ssh_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "\
            # Crear network si no existe
            docker network create app-network || true && \

          # Iniciar PostgreSQL
          docker run -d \
            --name db \
            --network app-network \
            -p ${{ secrets.DATABASE_PORT }}:5432 \
            -e POSTGRES_USER='${{ secrets.DATABASE_USER }}' \
            -e POSTGRES_PASSWORD='${{ secrets.DATABASE_PASSWORD }}' \
            -e POSTGRES_DB='${{ secrets.DATABASE_NAME }}' \
            postgres:15.4-alpine && \

           # Pull y ejecutar la aplicaci√≥n
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && \
            docker stop worker_sheet_container || true && \
            docker rm worker_sheet_container || true && \
          
            # Docker run api
            docker run -d \
              --name worker_sheet_container \
              --network app-network \
              --restart unless-stopped \
              -p 3000:3000 \
              --cap-add=SYS_PTRACE \
              --security-opt seccomp=unconfined \
              -e DATABASE_USER='${{ secrets.DATABASE_USER }}' \
              -e DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}' \
              -e DATABASE_PORT='${{ secrets.DATABASE_PORT }}' \
              -e DATABASE_NAME='${{ secrets.DATABASE_NAME }}' \
              -e DATABASE_HOST='${{ secrets.DATABASE_HOST }}' \
              -e DATABASE_URL='postgres://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}' \
              -e HASH_SECRET='${{ secrets.HASH_SECRET }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e API_KEY='${{ secrets.API_KEY }}' \
              -e SMTP_EMAIL='${{ secrets.SMTP_EMAIL }}' \
              -e SMTP_EMAIL_PASSWORD='${{ secrets.SMTP_EMAIL_PASSWORD }}' \
              -e SMTP_SERVER='${{ secrets.SMTP_SERVER }}' \
              -e SMTP_SERVER_PORT='${{ secrets.SMTP_SERVER_PORT }}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"