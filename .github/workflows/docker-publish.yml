name: Docker Build and Publish

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

env:
  REGISTRY: docker.pkg.github.com
  IMAGE_NAME: jhonacodes/worker_sheet_api/worker_sheet_image
  APP_ENV: prod
  DATABASE_MAX_CONNECTIONS: 10
  DATABASE_MIN_CONNECTIONS: 1
  DATABASE_POOL_SIZE: 12
  DATABASE_TIMEOUT: 12.4
  SERVER_HOST: 0.0.0.0
  SERVER_PORT: 3000
  DEBUG_MODE: false

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y libpq-dev postgresql-client libclang-dev libargon2-dev

      - name: Run tests and generate coverage
        run: cargo tarpaulin --verbose --workspace --timeout 120 --out Xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-and-push:
    needs: test-coverage
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_URL=postgres://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}
            HASH_SECRET=${{ secrets.HASH_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            API_KEY=${{ secrets.API_KEY }}
            SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
            SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
            SMTP_SERVER=${{ secrets.SMTP_SERVER }}
            SMTP_SERVER_PORT=${{ secrets.SMTP_SERVER_PORT }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          # Configurar SSH
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          mkdir -p ~/.ssh
          ssh-keyscan -v -p 22 ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          # Crear archivo .env en el servidor
          ssh -i ssh_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cat > .env << EOF
          APP_ENV=prod
          DATABASE_MAX_CONNECTIONS=${{ env.DATABASE_MAX_CONNECTIONS }}
          DATABASE_MIN_CONNECTIONS=${{ env.DATABASE_MIN_CONNECTIONS }}
          DATABASE_POOL_SIZE=${{ env.DATABASE_POOL_SIZE }}
          DATABASE_TIMEOUT=${{ env.DATABASE_TIMEOUT }}
          SERVER_HOST=${{ env.SERVER_HOST }}
          SERVER_PORT=${{ env.SERVER_PORT }}
          DEBUG_MODE=${{ env.DEBUG_MODE }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_URL=postgres://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOST }}:${{ secrets.DATABASE_PORT }}/${{ secrets.DATABASE_NAME }}
          HASH_SECRET=${{ secrets.HASH_SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          API_KEY=${{ secrets.API_KEY }}
          SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
          SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
          SMTP_SERVER=${{ secrets.SMTP_SERVER }}
          SMTP_SERVER_PORT=${{ secrets.SMTP_SERVER_PORT }}
          EOF"

          # Copiar docker-compose.yml al servidor
          scp -i ssh_key docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/docker-compose.yml

          # Instalar docker compose en el VPS si no está instalado
          ssh -i ssh_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "\
            if ! command -v docker-compose &> /dev/null; then \
              sudo apt-get update && \
              sudo apt-get install -y docker-compose-plugin && \
              sudo ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose; \
            fi"

          # Login a GitHub Packages en el VPS
          ssh -i ssh_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo ${{ secrets.G_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin"

          # Desplegar usando docker compose con limpieza previa de contenedores
          ssh -i ssh_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "\
            # Detener y eliminar contenedores existentes (viejos)
            docker stop worker_sheet_container db || true && \
            docker rm worker_sheet_container db || true && \
          
            # Detener y eliminar contenedores de docker-compose si existen
            docker stop api_prod database_prod || true && \
            docker rm api_prod database_prod || true && \
          
            # Pull de la nueva imagen
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && \
          
            # Limpiar imágenes antiguas
            docker image prune -f && \
          
            # Desplegar con docker compose
            docker compose -f docker-compose.yml --profile prod up -d"