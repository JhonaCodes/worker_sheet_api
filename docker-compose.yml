version: '3.8'

services:
  db:
    container_name: database_${APP_ENV}
    image: postgres:15
    ports:
      - "${DATABASE_PORT}:5432"
    env_file: ${ENV_FILE:-.env}
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    profiles:
      - prod
      - dev

  api:
    container_name: api_${APP_ENV}
    build:
      context: .
      dockerfile: Dockerfile
    image: docker.pkg.github.com/jhonacodes/worker_sheet_api/worker_sheet_image
    volumes:
      - uploads_data:/app/uploads
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    env_file: ${ENV_FILE:-.env}
    environment:
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
      - RUST_LOG=debug
      - JWT_SECRET=${JWT_SECRET}
      - HASH_SECRET=${HASH_SECRET}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - ${APP_ENV:-prod}

volumes:
  postgres_data:
    name: postgres_data_${APP_ENV}
  uploads_data:
    name: uploads_data_${APP_ENV}

networks:
  app-network:
    driver: bridge